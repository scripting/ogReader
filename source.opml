<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Thu, 04 Sep 2025 13:07:27 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes https://drummer.land. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: ogreader</title>
		<dateCreated>Mon, 16 Jun 2025 21:30:07 GMT</dateCreated>
		<dateModified>Thu, 04 Sep 2025 13:07:27 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 6, 7, 12, 19</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>192</windowTop>
		<windowLeft>800</windowLeft>
		<windowBottom>941</windowBottom>
		<windowRight>1947</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/ogreader/">
			<outline text="worknotes.md" created="Sun, 18 Jun 2023 16:13:00 GMT">
				<outline text="#### 9/4/25; 9:05:26 AM by DW" created="Thu, 04 Sep 2025 13:05:26 GMT">
					<outline text="We were getting an error by being fancy about returning the code that was returned to us." created="Thu, 04 Sep 2025 13:05:27 GMT"/>
					<outline text="We were trying to transmit a string, where in HTTP only a number can be returned for a code." created="Thu, 04 Sep 2025 13:05:58 GMT"/>
					</outline>
				<outline text="#### 8/9/25; 10:41:17 AM by DW" created="Sat, 09 Aug 2025 14:41:17 GMT">
					<outline text="Prevent crash if no url param supplied." created="Sat, 09 Aug 2025 14:41:18 GMT"/>
					</outline>
				<outline text="#### 6/16/25; 12:19:00 PM by DW" created="Tue, 27 May 2025 16:05:06 GMT">
					<outline text="Started." created="Mon, 16 Jun 2025 16:19:05 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;ogreader&quot;, "/>
					<outline text="&quot;description&quot;: &quot;Read Open Graph metadata from HTML via server.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.1&quot;,"/>
					<outline text="&quot;main&quot;: &quot;ogreader.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;cheerio&quot;: &quot;1.0.0-rc.10&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="ogreader.js" created="Sun, 14 Jul 2024 15:43:38 GMT">
				<outline text="const myProductName = &quot;ogReader&quot;, myVersion = &quot;0.4.1&quot;; " created="Sun, 20 Apr 2025 20:00:01 GMT"/>
				<outline text="" created="Mon, 16 Jun 2025 16:20:04 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const request = require (&quot;request&quot;); "/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const davehttp = require (&quot;davehttp&quot;); "/>
				<outline text="const cheerio = require (&quot;cheerio&quot;);"/>
				<outline text="" created="Mon, 16 Jun 2025 16:44:20 GMT"/>
				<outline text="" created="Mon, 16 Jun 2025 16:44:21 GMT"/>
				<outline text="var config = { ">
					<outline text="port: process.env.PORT || 1408,"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="flAllowAccessFromAnywhere: true"/>
					<outline text="};"/>
					</outline>
				<outline text="" created="Mon, 16 Jun 2025 16:20:55 GMT"/>
				<outline text="function getMetadataFromHtml (htmlUrl, callback) {" created="Thu, 13 Jun 2024 14:02:00 GMT">
					<outline text="request (htmlUrl, function (err, response, htmltext) {">
						<outline text="if (err) {" created="Fri, 15 Sep 2023 15:07:33 GMT">
							<outline text="callback (err);" created="Mon, 10 Jun 2024 19:04:25 GMT"/>
							<outline text="}" created="Fri, 15 Sep 2023 15:07:37 GMT"/>
							</outline>
						<outline text="else {" created="Fri, 15 Sep 2023 15:07:39 GMT">
							<outline text="if ((response.statusCode &gt;= 200) &amp;&amp; (response.statusCode &lt;= 299)) {" created="Fri, 15 Sep 2023 15:08:11 GMT">
								<outline text="const $ = cheerio.load (htmltext);"/>
								<outline text="const ogTags = {};"/>
								<outline text="$(&quot;meta[property^='og:']&quot;).each (function () {">
									<outline text="const property = $(this).attr (&quot;property&quot;);"/>
									<outline text="const content = $(this).attr (&quot;content&quot;);"/>
									<outline text="if (property &amp;&amp; content) {">
										<outline text="const name = utils.stringDelete (property, 1, 3); //pop off &quot;og:&quot;" created="Mon, 16 Jun 2025 16:35:14 GMT"/>
										<outline text="ogTags [name] = content;"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="callback (undefined, ogTags);" created="Mon, 16 Jun 2025 16:23:15 GMT"/>
								<outline text="}" created="Fri, 15 Sep 2023 15:08:21 GMT"/>
								</outline>
							<outline text="else {" created="Fri, 15 Sep 2023 15:08:22 GMT">
								<outline text="const message = &quot;Couldn't read HTML page because status code == &quot; + response.statusCode;" created="Thu, 13 Jun 2024 14:03:37 GMT"/>
								<outline text="callback ({message});" created="Mon, 10 Jun 2024 19:04:25 GMT"/>
								<outline text="}" created="Fri, 15 Sep 2023 15:08:24 GMT"/>
								</outline>
							<outline text="}" created="Fri, 15 Sep 2023 15:07:41 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Thu, 13 Jun 2024 14:02:17 GMT"/>
					</outline>
				<outline text="" created="Mon, 16 Jun 2025 16:24:04 GMT"/>
				<outline text="function handleHttpRequest (theRequest, options = new Object ()) { //returns true if request was handled" created="Tue, 22 Aug 2023 21:49:47 GMT">
					<outline text="Changes" isComment="true" created="Tue, 31 Oct 2023 13:54:15 GMT">
						<outline text="10/31/23; 9:54:19 AM by DW" created="Tue, 31 Oct 2023 13:54:18 GMT">
							<outline text="New optional param, options. " created="Tue, 31 Oct 2023 13:54:19 GMT"/>
							</outline>
						</outline>
					<outline text="const params = theRequest.params;" created="Tue, 22 Aug 2023 16:23:04 GMT"/>
					<outline text="" created="Thu, 27 Feb 2025 15:19:14 GMT"/>
					<outline text="function returnRedirect (url, code) { //9/30/20 by DW">
						<outline text="var headers = {">
							<outline text="location: url"/>
							<outline text="};"/>
							</outline>
						<outline text="if (code === undefined) {">
							<outline text="code = 302;"/>
							<outline text="}"/>
							</outline>
						<outline text="theRequest.httpReturn (code, &quot;text/plain&quot;, code + &quot; REDIRECT&quot;, headers);"/>
						<outline text="}"/>
						<outline text=""/>
						</outline>
					<outline text="function returnPlaintext (theText) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, theText);"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnNotFound () {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnError (err) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (503, &quot;text/plain&quot;, err.message);"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function returnData (jstruct) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="theRequest.httpReturn (200, &quot;text/json&quot;, utils.jsonStringify (jstruct)); //5/9/24 by DW"/>
						<outline text="theRequest.httpReturn (200, &quot;application/javascript&quot;, utils.jsonStringify (jstruct));" isComment="true"/>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="function httpReturn (err, data) {" created="Mon, 28 Feb 2022 14:38:48 GMT">
						<outline text="if (err) {" created="Thu, 27 Jan 2022 16:15:45 GMT">
							<outline text="returnError (err); //9/4/25; 9:04:48 AM by DW -- don't try to send the code" created="Mon, 28 Feb 2022 14:42:42 GMT"/>
							<outline text="" isComment="true" created="Thu, 04 Sep 2025 13:04:31 GMT"/>
							<outline text="if (err.code !== undefined) { //2/22/25 by DW -- let the caller determine the code" isComment="true" created="Sat, 22 Feb 2025 14:35:03 GMT">
								<outline text="console.log (&quot;httpReturn: err.code == &quot; + err.code + &quot;, err.message == &quot; + err.message);" isComment="true" created="Mon, 25 Mar 2024 14:53:58 GMT"/>
								<outline text="theRequest.httpReturn (err.code, &quot;text/plain&quot;, err.message);"/>
								<outline text="}" created="Sat, 22 Feb 2025 14:35:11 GMT"/>
								</outline>
							<outline text="else {" isComment="true" created="Sat, 22 Feb 2025 14:35:12 GMT">
								<outline text="console.log (&quot;httpReturn: err.message == &quot; + err.message);" isComment="true" created="Mon, 25 Mar 2024 14:53:58 GMT"/>
								<outline text="returnError (err);" created="Mon, 28 Feb 2022 14:42:42 GMT"/>
								<outline text="}" created="Sat, 22 Feb 2025 14:35:14 GMT"/>
								</outline>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:48 GMT"/>
							</outline>
						<outline text="else {" created="Thu, 27 Jan 2022 16:15:49 GMT">
							<outline text="console.log (&quot;httpReturn: data == &quot; + utils.jsonStringify (data));" isComment="true" created="Mon, 25 Mar 2024 14:53:58 GMT"/>
							<outline text="returnData (data);" created="Thu, 27 Jan 2022 16:15:54 GMT"/>
							<outline text="}" created="Thu, 27 Jan 2022 16:15:51 GMT"/>
							</outline>
						<outline text="}" created="Mon, 28 Feb 2022 14:38:53 GMT"/>
						</outline>
					<outline text="" created="Tue, 30 Apr 2024 15:05:28 GMT"/>
					<outline text="switch (theRequest.lowermethod) {" created="Sun, 24 Mar 2024 15:58:39 GMT">
						<outline text="case &quot;get&quot;:" created="Sun, 24 Mar 2024 15:58:57 GMT">
							<outline text="switch (theRequest.lowerpath) {">
								<outline text="case &quot;/&quot;:">
									<outline text="if (params.url === undefined) { //8/9/25 by DW" created="Sat, 09 Aug 2025 14:40:36 GMT">
										<outline text="returnNotFound ();" created="Mon, 16 Jun 2025 17:54:14 GMT"/>
										<outline text="}" created="Sat, 09 Aug 2025 14:40:43 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 09 Aug 2025 14:40:44 GMT">
										<outline text="getMetadataFromHtml (params.url, httpReturn);" created="Mon, 16 Jun 2025 17:53:13 GMT"/>
										<outline text="}" created="Sat, 09 Aug 2025 14:40:46 GMT"/>
										</outline>
									<outline text="return (true);" created="Mon, 16 Jun 2025 17:53:36 GMT"/>
									</outline>
								<outline text="case &quot;/now&quot;:">
									<outline text="returnPlaintext (new Date ().toUTCString ());"/>
									<outline text="return (true);"/>
									</outline>
								<outline text="default:">
									<outline text="returnNotFound ();" created="Mon, 16 Jun 2025 17:54:14 GMT"/>
									<outline text="return (true);" created="Mon, 16 Jun 2025 17:54:16 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							</outline>
						<outline text="}" created="Sun, 24 Mar 2024 15:58:42 GMT"/>
						</outline>
					<outline text="}" created="Tue, 22 Aug 2023 21:49:55 GMT"/>
					</outline>
				<outline text="" created="Mon, 16 Jun 2025 17:51:01 GMT"/>
				<outline text="function startup () {" created="Mon, 16 Jun 2025 16:24:05 GMT">
					<outline text="" created="Mon, 16 Jun 2025 17:48:36 GMT"/>
					<outline text="davehttp.start (config, handleHttpRequest);"/>
					<outline text="" created="Mon, 16 Jun 2025 17:48:37 GMT"/>
					<outline text="" created="Mon, 16 Jun 2025 17:48:37 GMT"/>
					<outline text="" isComment="true" created="Mon, 16 Jun 2025 17:48:37 GMT"/>
					<outline text="const htmlUrl = &quot;http://scripting.com/2025/06/15/141220.html&quot;;" isComment="true" created="Mon, 16 Jun 2025 16:44:21 GMT"/>
					<outline text="getMetadataFromHtml (htmlUrl, function (err, theData) {" isComment="true" created="Mon, 16 Jun 2025 16:24:12 GMT">
						<outline text="if (err) {" created="Mon, 16 Jun 2025 16:24:27 GMT">
							<outline text="console.log (err.message);" created="Mon, 16 Jun 2025 16:24:29 GMT"/>
							<outline text="}" created="Mon, 16 Jun 2025 16:24:36 GMT"/>
							</outline>
						<outline text="else {" created="Mon, 16 Jun 2025 16:24:36 GMT">
							<outline text="console.log (utils.jsonStringify (theData));" created="Mon, 16 Jun 2025 16:24:39 GMT"/>
							<outline text="}" created="Mon, 16 Jun 2025 16:24:38 GMT"/>
							</outline>
						<outline text="});" created="Mon, 16 Jun 2025 16:24:25 GMT"/>
						</outline>
					<outline text="}" created="Mon, 16 Jun 2025 16:24:11 GMT"/>
					</outline>
				<outline text="startup ();" created="Sat, 26 Apr 2025 20:59:31 GMT"/>
				</outline>
			<outline text="readme.md" created="Mon, 16 Jun 2025 22:13:22 GMT">
				<outline text="# ogReader" created="Mon, 16 Jun 2025 22:13:25 GMT">
					<outline text="A simple Node app that returns Open Graph metadata for a file you specify." created="Mon, 16 Jun 2025 22:13:29 GMT"/>
					</outline>
				<outline text="### Example" created="Mon, 16 Jun 2025 22:14:01 GMT">
					<outline text="&lt;a href=&quot;https://ogreader.opml.org/?url=http://scripting.com/2025/06/15/141220.html&quot;&gt;https://ogreader.opml.org/?url=http://scripting.com/2025/06/15/141220.html&lt;/a&gt;" created="Mon, 16 Jun 2025 22:14:06 GMT"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Mon, 16 Jun 2025 21:30:30 GMT">
			<outline text="nodeEditorSuite.utilities.buildOgReader ()" created="Tue, 17 Dec 2024 23:26:15 GMT"/>
			</outline>
		</body>
	</opml>
